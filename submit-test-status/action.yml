---
name: Submit Test Status

description: Submits test status records from a GHA workflow job to CI Analytics. See https://confluence.camunda.com/display/HAN/CI+Analytics

inputs:
  # test_class_name:
  #   description: Individual (unit) test cases are usually grouped together in a container ("class" in Java world). This field holds the name of the class.
  #   required: false
  # test_class_duration_millis:
  #   description: Optional number (positive) that indicates the duration of the tests for a whole class in milliseconds.
  #   required: false
  # test_name:
  #   description: Name of the individual test case, can include parameters for uniqueness.
  #   required: true
  # test_status:
  #   description: Status of the individual test case, one of success/failure/skipped/flaky.
  #   required: true
  # test_duration_millis:
  #   description: Optional number (positive) that indicates the duration of the individual test in milliseconds.
  #   required: false
  test_event_record:
    description: Test event(s) in JSONL format. Required fields are test_name, test_status
    required: true

  gcp_credentials_json:
    description: Credentials for a Google Cloud ServiceAccount allowed to publish to Big Query formatted as contents of credentials.json file.
    required: true

  big_query_table_name:
    description: Use only for infrastructure testing purposes to target e.g. dev environment.
    required: false
    default: 'ci-30-162810:prod_ci_analytics.test_status_v1'


runs:
  using: composite
  steps:
  - name: Echo inputs
    shell: bash
    run: |
      echo "Inputs"
      echo "-----"
      echo "Test event record: ${{ inputs.test_event_record }}"
      echo "BQ table name (for testing): ${{ inputs.big_query_table_name }}"

  - name: Validate test record
    shell: bash
    run: |
      #TODO: validate JSONL input for the presence of mandatory keys

  - name: Login to Google Cloud
    id: auth
    uses: google-github-actions/auth@v2
    with:
      credentials_json: '${{ inputs.gcp_credentials_json }}'

  - name: Setup Google Cloud SDK
    uses: google-github-actions/setup-gcloud@v2

  - name: Print Google Cloud SDK version used
    shell: bash
    run: |
      gcloud info

  - name: Ensure that jq is available
    shell: bash
    run: |
      if ! command -v jq &> /dev/null; then
        echo "jq is not installed. Installing..."
        sudo apt-get update && sudo apt-get install -y jq
      else
        echo "jq is already installed."
      fi

  - name: Download table schema
    id: download-schema
    env:
      BQ_COMMAND: "${{ (runner.os == 'Windows') && 'bq.cmd' || 'bq' }}"
    shell: bash
    run: |
      TEMP_DIR=$(mktemp -d)
      $BQ_COMMAND show \
        --format prettyjson \
        "${{ inputs.big_query_table_name }}" \
      | jq '.schema.fields' > $TEMP_DIR/table_schema.json
      echo "::set-output name=temp-dir::$TEMP_DIR"
      echo "::set-output name=bq-command::$BQ_COMMAND"
      cat $TEMP_DIR/table_schema.json

  - name: Submit build status to CI Analytics
    shell: bash
    run: |
      BQ_TABLE=$(echo "${{ inputs.big_query_table_name }}" | cut -d':' -f2)

      echo ${{ inputs.test_event_record }}
      echo ${{ inputs.test_event_record }} > ${{ steps.download-schema.outputs.temp-dir }}/input_test_event_record.json
      REPORT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
      jq -c --arg REPORT_TIME "$REPORT_TIME" '. + {report_time: $REPORT_TIME}' \
        ${{ steps.download-schema.outputs.temp-dir }}/input_test_event_json \
        > ${{ steps.download-schema.outputs.temp-dir }}/test_event_record.json

      cat ${{ steps.download-schema.outputs.temp-dir }}/input_test_event_record.json
      cat ${{ steps.download-schema.outputs.temp-dir }}/test_event_record.json

      ${{ steps.download-schema.outputs.bq-command }} load \
        --source_format=NEWLINE_DELIMITED_JSON \
        --project_id=$GCP_PROJECT \
        $BQ_TABLE \
        ${{ steps.download-schema.outputs.temp-dir }}/test_event_record.json \
        ${{ steps.download-schema.outputs.temp-dir }}/table_schema.json
