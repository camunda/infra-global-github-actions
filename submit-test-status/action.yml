---
name: Submit Test Status

description: Submits test status records from a GHA workflow job to CI Analytics. See https://confluence.camunda.com/display/HAN/CI+Analytics

inputs:
  test_results_file_path:
    description: Path to a file containing test event(s) in JSONL format. Required keys are test_name and test_status.
    required: false

  test_event_record:
    description: Test event(s) in JSONL format. Required keys are test_name and test_status.
    required: false

  gcp_credentials_json:
    description: Credentials for a Google Cloud ServiceAccount allowed to publish to Big Query formatted as contents of credentials.json file.
    required: true

  job_name_override:
    description: Optional string being used for the `job_name` field instead of the default `$GITHUB_JOB` useful e.g. for matrix builds
    required: false
    default: ''

  big_query_table_name:
    description: Use only for infrastructure testing purposes to target e.g. dev environment.
    required: false
    default: 'ci-30-162810:prod_ci_analytics.test_status_v1'


runs:
  using: composite
  steps:
  - name: Echo inputs
    shell: bash
    run: |
      echo "Inputs"
      echo "-----"
      echo "Job name override: ${{ inputs.job_name_override }} (default job name: $GITHUB_JOB)"
      echo "BQ table name (for testing): ${{ inputs.big_query_table_name }}"
      echo "Test results file path: '${{ inputs.test_results_file_path }}'"
      echo "Test event record provided: ${{ inputs.test_event_record != '' }}"

      # Show what the load input step will do
      if [ -n "${{ inputs.test_results_file_path }}" ]; then
        echo "Will use file path input method: ${{ inputs.test_results_file_path }}"
      elif [ -n '${{ inputs.test_event_record }}' ]; then
        echo "Will use inline data input method"
      else
        echo "INFO: No input detected - will skip CI Analytics submission (no test issues to report)"
      fi
      echo "-----"

  - name: ensure that jq is available
    uses: dcarbone/install-jq-action@v3.2.0

  - name: load input
    shell: bash
    env:
      TEMP_DIR: ${{ runner.temp }}/sts
    run: |
      mkdir -p "$TEMP_DIR"

      echo "Checking inputs..."
      echo "test_results_file_path: '${{ inputs.test_results_file_path }}'"

      if [ -n "${{ inputs.test_results_file_path }}" ]; then
        # Method 1: Use provided file path
        INPUT_FILE="${{ inputs.test_results_file_path }}"
        echo "Using file path input method: $INPUT_FILE"

        # Verify the file exists
        if [ ! -f "$INPUT_FILE" ]; then
          echo "ERROR: File not found: $INPUT_FILE"
          exit 1
        fi

      elif [ -n '${{ inputs.test_event_record }}' ]; then
        # Method 2: Create file from inline input
        INPUT_FILE="$TEMP_DIR/input_test_event_record.jsonl"
        echo "Using inline data input method, creating: $INPUT_FILE"

        # Write the test event record to file using environment variable method (handles all characters safely)
        export JSONDATA='${{ inputs.test_event_record }}'
        printf '%s\n' "$JSONDATA" > "$INPUT_FILE"
        echo "Collected $(wc -l < "$INPUT_FILE") test results from the records provided"

      else
        # No input provided - this might be okay if no flaky/failed tests exist
        echo "INFO: No input provided."
        echo "This could mean:"
        echo "1. No test_results_file_path was provided, AND"
        echo "2. No test_event_record was provided (possibly no flaky/failed tests)"
        echo ""
        echo "If using inline method and no flaky/failed tests exist, this is expected behavior."
        echo "Skipping CI Analytics submission - no test issues to report."
        echo "PROCEED_WITH_SUBMISSION=false" >> $GITHUB_ENV
        exit 0
      fi

      echo "Final INPUT_FILE: $INPUT_FILE"
      echo "INPUT_FILE=$INPUT_FILE" >> $GITHUB_ENV
      echo "PROCEED_WITH_SUBMISSION=true" >> $GITHUB_ENV

  - name: validate input for file format
    if: env.PROCEED_WITH_SUBMISSION == 'true'
    shell: bash
    run: |
      # validate input for the presence of mandatory keys
      INVALID_LINES=$(jq -c 'select((has("test_name") and has("test_status")) | not)' "$INPUT_FILE")
      if [ -n "$INVALID_LINES" ]; then
        echo "JSONL input validation failed. The following lines are invalid:"
        echo "$INVALID_LINES"
        exit 1
      fi

  - name: login to Google Cloud
    if: env.PROCEED_WITH_SUBMISSION == 'true'
    id: auth
    uses: google-github-actions/auth@v3
    with:
      credentials_json: '${{ inputs.gcp_credentials_json }}'

  - name: setup Google Cloud SDK
    if: env.PROCEED_WITH_SUBMISSION == 'true'
    uses: google-github-actions/setup-gcloud@v3

  - name: Print Google Cloud SDK version used
    if: env.PROCEED_WITH_SUBMISSION == 'true'
    shell: bash
    run: |
      gcloud info

  - name: download table schema from CI Analytics
    if: env.PROCEED_WITH_SUBMISSION == 'true'
    shell: bash
    env:
      BQ_COMMAND: "${{ (runner.os == 'Windows') && 'bq.cmd' || 'bq' }}"
    run: |
      $BQ_COMMAND show \
        --format prettyjson \
        "${{ inputs.big_query_table_name }}" \
      | jq '.schema.fields' > ${{ runner.temp }}/sts/table_schema.json

  - name: submit to CI Analytics
    if: env.PROCEED_WITH_SUBMISSION == 'true'
    shell: bash
    env:
      TEMP_DIR: ${{ runner.temp }}/sts
      BQ_COMMAND: "${{ (runner.os == 'Windows') && 'bq.cmd' || 'bq' }}"
    run: |
      # add mandatory report_time, ci_url and build_id to the test records
      REPORT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
      jq -c \
        --arg REPORT_TIME "$REPORT_TIME" \
        --arg CI_URL "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
        --arg BUILD_ID "$GITHUB_RUN_ID/$GITHUB_RUN_ATTEMPT" \
        --arg JOB_NAME "${{ (inputs.job_name_override == '') && '$GITHUB_JOB' || inputs.job_name_override }}" \
        '. + {"report_time": $REPORT_TIME} + {"ci_url": $CI_URL} + {"build_id": $BUILD_ID} + {"job_name": $JOB_NAME}' \
         "$INPUT_FILE" > $TEMP_DIR/enriched_test_event_records.jsonl

      # upload data to CI Analytics
      BQ_TABLE=$(echo "${{ inputs.big_query_table_name }}" | cut -d':' -f2)
      $BQ_COMMAND load \
        --source_format=NEWLINE_DELIMITED_JSON \
        --project_id=$GCP_PROJECT \
        $BQ_TABLE \
        $TEMP_DIR/enriched_test_event_records.jsonl \
        $TEMP_DIR/table_schema.json
