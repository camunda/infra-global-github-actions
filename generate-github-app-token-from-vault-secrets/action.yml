name: Generate a GitHub App token from secrets stored in Vault

description: Generate a GitHub token from GitHub App secrets (ID & Private Key) stored in Vault

inputs:
  github-app-id-vault-key:
    description: The key of the Vault secret storing the ID of the GitHub App
    required: true
    type: string
  github-app-id-vault-path:
    description: The path of the Vault secret storing the ID of the GitHub App
    required: true
    type: string
  github-app-private-key-vault-key:
    description: The key of the Vault secret storing the private key of the GitHub App
    required: true
    type: string
  github-app-private-key-vault-path:
    description: The path of the Vault secret storing the private key of the GitHub App
    required: true
    type: string
  vault-auth-method:
    description: The method to use to authenticate with Vault
    required: true
    type: string
  vault-auth-role-id:
    description: The Role Id for (Vault) App Role authentication
    required: true
    type: string
  vault-auth-secret-id:
    description: The Secret Id for (Vault) App Role authentication
    required: true
    type: string
  vault-url:
    description: The URL for the Vault endpoint
    required: true
    type: string
  skip-token-revoke:
    description: "If truthy, the token will not be revoked when the current job is complete"
    required: false
    type: boolean
  owner:
    description: "The owner of the GitHub App installation (defaults to current repository owner)"
    required: false
    type: string
  repositories:
    description: "Comma or newline-separated list of repositories to install the GitHub App on (defaults to current repository if owner is unset)"
    required: false
    type: string

outputs:
  token:
    description: The generated GitHub token
    value: ${{ steps.github-token.outputs.token }}

  installation-id:
    description: "GitHub App installation ID"
    value: ${{ steps.github-token.outputs.installation-id }}

  app-slug:
    description: "GitHub App slug"
    value: ${{ steps.github-token.outputs.app-slug }}

runs:
  using: composite
  steps:
  - name: Import the GitHub App ID from vault
    id: app-id
    uses: hashicorp/vault-action@v3.0.0
    with:
      url: ${{ inputs.vault-url }}
      method: ${{ inputs.vault-auth-method }}
      roleId: ${{ inputs.vault-auth-role-id }}
      secretId: ${{ inputs.vault-auth-secret-id }}
      exportEnv: false
      secrets: >
        ${{
          format(
            '{0} {1} | {2};',
            inputs.github-app-id-vault-path,
            inputs.github-app-id-vault-key,
            'id'
          )
        }}
  - name: Import the GitHub App secret key from vault
    id: app-private-key
    uses: hashicorp/vault-action@v3.0.0
    with:
      url: ${{ inputs.vault-url }}
      method: ${{ inputs.vault-auth-method }}
      roleId: ${{ inputs.vault-auth-role-id }}
      secretId: ${{ inputs.vault-auth-secret-id }}
      exportEnv: false
      secrets: >
        ${{
          format(
            '{0} {1} | {2};',
            inputs.github-app-private-key-vault-path,
            inputs.github-app-private-key-vault-key,
            'private-key'
          )
        }}

  - name: Set owner and repositories
    id: split-repo
    shell: bash
    run: |
      # Get the repository name and owner from github.repository
      repo_info="${{ github.repository }}"

      if [ -z "${{ inputs.owner }}" ]; then
        repo_owner=$(echo "$repo_info" | awk -F'/' '{print $1}')
        echo "owner=${repo_owner}" >> $GITHUB_ENV
      else
        echo "owner=${{ inputs.owner }}" >> $GITHUB_ENV
      fi

      if [ -z "${{ inputs.repositories }}" ]; then
        repo_name=$(echo "$repo_info" | awk -F'/' '{print $2}')
        echo "repositories=${repo_name}" >> $GITHUB_ENV
      else
        echo "repositories=${{ inputs.repositories }}" >> $GITHUB_ENV
      fi

  - name: Generate a Github App token
    id: github-token
    uses: actions/create-github-app-token@v1
    with:
      app-id: ${{ steps.app-id.outputs.id }}
      private-key: ${{ steps.app-private-key.outputs.private-key }}
      skip-token-revoke: ${{ inputs.skip-token-revoke }}
      owner: ${{ env.owner }}
      repositories: ${{ env.repositories }}
