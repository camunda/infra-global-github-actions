name: Retrigger failed run action

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: The ID of the workflow run to retrigger
        required: true
      error_messages:
        description: Custom error messages to look for in the logs
        required: true
      repository:
        description: GitHub repository (ORG/REPO_NAME)
        required: true
      notify-back-on-error:
        description: \
          When the error message does not match with the expected one,
          re-trigger the workflow with the parameter `notify_back_error_message`.
          Your calling workflow must implement the `notify_back_error_message` parameter
          and foward the error.
          This allows you to capture failures that are not related to a specific error.
        default: "false"

jobs:
  rerun:
    runs-on: ubuntu-latest
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/infra/ci/retrigger-gha-workflow RETRIGGER_APP_KEY;
            secret/data/products/infra/ci/retrigger-gha-workflow RETRIGGER_APP_ID;

      - name: Generate a GitHub token
        id: github-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ steps.secrets.outputs.RETRIGGER_APP_ID }}
          private_key: ${{ steps.secrets.outputs.RETRIGGER_APP_KEY }}

      - name: Check previous run logs
        id: check_logs
        env:
          GH_DEBUG: api
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
        run: |
          echo "Fetching logs for run with id: ${{ inputs.run_id }} from ${{ inputs.repository }} repository."
          # Fetch the logs from the previous run
          gh config set pager cat
          logs=$(gh run view ${{ inputs.run_id }} -R ${{ inputs.repository }} --exit-status || true)
          echo "Logs coming from run with id: ${{ inputs.run_id }}"
          inputted_errors='${{ inputs.error_messages }}'
          echo "Inputted errors: $inputted_errors"
          rerun=$(echo "$logs" | jq -c -n -R --argjson errors "$inputted_errors" '[inputs] | any(test($errors | join("|")))')
          echo "Notify back: ${{ inputs.notify-back-on-error }}"
          echo "Rerun: $rerun"
          echo "rerun=$rerun" >> "$GITHUB_OUTPUT"

      - name: Rerun run with id ${{ inputs.run_id }} for ${{ inputs.repository }} repository
        if: steps.check_logs.outputs.rerun == 'true'
        env:
          GH_DEBUG: api
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
        run: |
          : # wait until the job is completed
          gh run watch ${{ inputs.run_id }} -R ${{ inputs.repository }} > /dev/null 2>&1
          gh run rerun ${{ inputs.run_id }} -R ${{ inputs.repository }} --failed

      - name: Notify back error for run with id ${{ inputs.run_id }} for ${{ inputs.repository }} repository
        if: steps.check_logs.outputs.rerun == 'false' && inputs.notify-back-on-error == 'true'
        env:
          GH_DEBUG: api
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
          # TODO: change ref
        run: |
          : # retrieve workflow details
          WORKFLOW_URL="${{ github.server_url }}/${{ inputs.repository }}/actions/runs/${{ inputs.run_id }}"
          notify_back_error_message="This workflow attempted a retry but there was no match on the log message, so it was not retried. Please check: $WORKFLOW_URL"
          WORKFLOW_NAME=$(gh run view ${{ inputs.run_id }} -R ${{ inputs.repository }} --json workflowName --jq '.workflowName')

          : # trigger a new run with the error notify
          gh workflow run "${WORKFLOW_NAME}.yml" -R ${{ inputs.repository }} -f notify_back_error_message="$notify_back_error_message" -f ref="feature/retry-failed-actions"
