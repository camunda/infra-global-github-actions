---
name: Submit Build Status

description: Submits the build status of a GHA workflow job to CI Analytics. See https://confluence.camunda.com/display/HAN/CI+Analytics

inputs:
  build_status:
    description: String representing the build status that should be submitted to CI Analytics, e.g. "success", "failed", "cancelled".
    required: true
  build_duration_millis:
    description: Optional number (positive) that indicates the duration of the build in milliseconds.
    required: false
  user_reason:
    description: Optional string (200 chars max) the user can submit to indicate the reason why a build has ended with a certain build status , e.g. "flaky-tests".
    required: false
    default: ''
  user_description:
    description: Optional string (1000 chars max) the user can submit to provide details on the user_reason, e.g. a list of flaky tests.
    required: false
    default: ''

  gcp_credentials_json:
    description: Credentials for a Google Cloud ServiceAccount allowed to publish to Big Query formatted as contents of credentials.json file.
    required: true

  job_name_override:
    description: Optional string being used for the `job_name` field instead of the default `$GITHUB_JOB` useful e.g. for matrix builds
    required: false
    default: ''

  big_query_table_name:
    description: Use only for infrastructure testing purposes to target e.g. dev environment.
    required: false
    default: 'ci-30-162810:prod_ci_analytics.build_status_v2'

runs:
  using: composite
  steps:
  - name: Echo inputs
    shell: bash
    run: |
      echo "Inputs"
      echo "-----"
      echo "Build status: ${{ inputs.build_status }}"
      echo "Build duration (in ms): ${{ inputs.build_duration_millis }}"
      echo "User reason: ${{ inputs.user_reason }}"
      echo "User description: ${{ inputs.user_description }}"
      echo "Job name override: ${{ inputs.job_name_override }} (default job name: $GITHUB_JOB)"
      echo "BQ table name (for testing): ${{ inputs.big_query_table_name }}"

  - name: Validate inputs
    shell: bash
    env:
      BUILD_STATUS: "${{ inputs.build_status }}"
      USER_REASON: "${{ inputs.user_reason }}"
      USER_DESCRIPTION: "${{ inputs.user_description }}"
    run: |
      if [ "$BUILD_STATUS" == "" ]; then
        echo "Need to specify a build status that is not empty!"
        exit 1
      fi

      if [ "${#USER_REASON}" -gt 200 ]; then
        echo "Specified user reason has more than 200 characters!"
        exit 1
      fi

      if [ "${#USER_DESCRIPTION}" -gt 1000 ]; then
        echo "Specified user description has more than 1000 characters!"
        exit 1
      fi

  - name: Login to Google Cloud
    id: auth
    uses: google-github-actions/auth@v2
    with:
      credentials_json: '${{ inputs.gcp_credentials_json }}'

  - name: Setup Google Cloud SDK
    uses: google-github-actions/setup-gcloud@v3

  - name: Print Google Cloud SDK version used
    shell: bash
    run: |
      gcloud info

  - name: Submit build status to CI Analytics
    shell: bash
    env:
      BG_COMMAND: "${{ (runner.os == 'Windows') && 'bq.cmd' || 'bq' }}"
      BUILD_BASE_REF: "${{ github.base_ref && format('refs/heads/{0}', github.base_ref) || github.event.merge_group.base_ref }}"
      BUILD_HEAD_REF: "${{ github.head_ref && format('refs/heads/{0}', github.head_ref) || github.event.merge_group.head_ref }}"
    run: |
      cat <<EOF | tr '\n' ' ' | $BG_COMMAND insert "${{ inputs.big_query_table_name }}"
      {
        "report_time": "$(date '+%Y-%m-%d %H:%M:%S')",
        "ci_url": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY",
        "workflow_name": "$GITHUB_WORKFLOW",
        "job_name": "${{ (inputs.job_name_override == '') && '$GITHUB_JOB' || inputs.job_name_override }}",
        "build_id": "$GITHUB_RUN_ID/$GITHUB_RUN_ATTEMPT",
        "build_trigger": "$GITHUB_EVENT_NAME",
        "build_status": "${{ inputs.build_status }}",
        "build_ref": "$GITHUB_REF",
        "runner_name": "$(echo $RUNNER_NAME | tr '[:upper:]' '[:lower:]')",
        "runner_arch": "$(echo $RUNNER_ARCH | tr '[:upper:]' '[:lower:]')",
        "runner_os": "$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')"
        ${{ (env.BUILD_BASE_REF == '') && ' ' || format(', "build_base_ref": "{0}"', env.BUILD_BASE_REF) }}
        ${{ (env.BUILD_HEAD_REF == '') && ' ' || format(', "build_head_ref": "{0}"', env.BUILD_HEAD_REF) }}
        ${{ (inputs.build_duration_millis == '') && ' ' || format(', "build_duration_milliseconds": "{0}"', inputs.build_duration_millis) }}
        ${{ (inputs.user_reason == '') && ' ' || format(', "user_reason": "{0}"', inputs.user_reason) }}
        ${{ (inputs.user_description == '') && ' ' || format(', "user_description": "{0}"', inputs.user_description) }}
      }
      EOF

    # See https://github.com/actions/runner/issues/409#issuecomment-1013325196 for above ternary operator!
