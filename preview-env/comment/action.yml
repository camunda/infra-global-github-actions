---
name: Manage Deployment Result Summary
description: |
  Manages a deployment result summary as comment in the current PR based on deployment artifacts.
  If deployment artifacts have been uploaded, the action upserts the summary.
  If there are no deployment artifacts, the summary will get deleted.
  The deployment artifact name pattern: `deployment-status-<runID>-<runAttempt>-*`
runs:
  using: composite
  steps:
    - name: Download Deployment Status Artifacts
      uses: actions/download-artifact@v4
      with:
        path: deployment_status
        pattern: deployment-status-${{ github.run_id }}-${{ github.run_attempt }}-*
    - name: Check for deployment artifacts
      id: check_artifacts
      shell: bash
      run: |
        if [ -d deployment_status ] && find deployment_status -type f -name '*.md' | grep -q .; then
          echo "ARTIFACTS_FOUND=true" >> $GITHUB_OUTPUT
        else
          echo "ARTIFACTS_FOUND=false" >> $GITHUB_OUTPUT
        fi
    - name: Create deployment status summary
      if: steps.check_artifacts.outputs.ARTIFACTS_FOUND == 'true'
      shell: bash
      run: |
        shopt -s globstar   # enables the `**` wildcard
        summary="# :rocket: Deployment Results :rocket:\n"
        summary+=$(cat deployment_status/**/*.md)
        echo -e "$summary" | tee summary.md
    - name: Upsert Deployment Result Summary
      if: steps.check_artifacts.outputs.ARTIFACTS_FOUND == 'true'
      uses: mshick/add-pr-comment@v2
      with:
        message-path: summary.md
        refresh-message-position: true
    - name: Get all PR comments
      # this action will cause a warning:
      # `Unexpected input(s) 'owner', 'repo', 'issue_number', valid inputs are ['route', 'mediaType']`
      # This is expected and further info can be found here: https://github.com/octokit/request-action?tab=readme-ov-file#warnings
      if: steps.check_artifacts.outputs.ARTIFACTS_FOUND == 'true'
      id: get-comments
      env:
        GITHUB_TOKEN: ${{ github.token }}
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/{owner}/{repo}/issues/{issue_number}/comments
        owner: ${{ github.repository_owner }}
        repo: ${{ github.event.repository.name }}
        issue_number: ${{ github.event.pull_request.number }}
    - name: Delete Summary
      if: steps.check_artifacts.outputs.ARTIFACTS_FOUND == 'true' && steps.get-comments.outputs.data != '[]'
      uses: actions/github-script@v7
      env:
        COMMENTS: ${{ steps.get-comments.outputs.data }}
      with:
        script: |
          const comments = JSON.parse(process.env.COMMENTS);

          if (comments.length === 0) {
            console.log("No comments found.");
          } else {
            const targetComment = comments.find(comment => comment.body.includes('<!-- add-pr-comment:add-pr-comment -->'));
            if (targetComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: targetComment.id
              });
              console.log(`Deleted comment with ID: ${targetComment.id}`);
            } else {
              console.log('No comment found to delete.');
            }
          }
