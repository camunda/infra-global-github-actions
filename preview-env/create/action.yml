---
name: Deploy preview environment

description: Deploys a preview environment.

inputs:

  revision:
    description: Revision or branch of the Helm chart. Typically the branch to be deployed, or `master`.
    required: true

  app_name:
    description: The name of the argocd application, generally "product-deployment_id".
    required: true

  app_url:
    description: The URL to access the deployed app.
    required: true

  argocd_server:
    description: URL of the Argo CD instance to target.
    required: false
    default: argocd.int.camunda.com

  argocd_token:
    description: An Argo CD token with sufficient permissions to create Applications.
    required: true

  argocd_version:
    # renovate: datasource=docker depName=quay.io/argoproj/argocd
    default: v2.13.4
    description: Version tag of Argo CD CLI tool
    required: false

  argocd_arguments:
    description: List of arguments to pass to Argocd command for creating the new application
    required: true

  argocd_wait_for_sync_timeout:
    description: The time (in seconds) that the action waits for the app to become healthy
    required: false
    default: "1800" # wait for up to 30 minutes

  github_token:
    description: |-
      GitHub token is used to authenticate with Teleport.
      It needs to have `contents: read`, `deployments:write` and `id-token:write` permissions.
      If the token is present, the Kubernetes events get added to the troubleshooting information.
    required: false

runs:
  using: composite
  steps:
  - name: Restore cache
    uses: actions/cache@v4
    id: tool-cache-argocd
    with:
      path: /usr/local/bin/argocd
      key: ${{ runner.os }}-tool-cache-argo-${{ inputs.argocd_version }}
  - name: Setup Argo CD
    shell: bash
    if: ${{ steps.tool-cache-argocd.outputs.cache-hit != 'true' }}
    run: |-
      curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/${{ inputs.argocd_version }}/argocd-linux-amd64
      chmod +x /usr/local/bin/argocd
      argocd version
    env:
      ARGOCD_AUTH_TOKEN: ${{ inputs.argocd_token }}
      ARGOCD_OPTS: "--grpc-web"
      ARGOCD_SERVER: ${{ inputs.argocd_server }}
  - name: Ensure that jq is available
    uses: dcarbone/install-jq-action@v3.0.1
    #########################################################################
    # Create a GitHub deployment that points to the URL we're going to deploy to.
    # If a Pull Request exists, it will show the status of this deployment.
  - uses: bobheadxi/deployments@v1.5.0
    name: Create GitHub deployment
    id: deployment
    with:
      step: start
      token: "${{ github.token }}"
      env: ${{ inputs.app_name }}
      ref: ${{ inputs.revision }}
  - name: Deploy
    shell: bash
    run: |
      max_retries=3
      for attempt in $(seq "$max_retries"); do
          argocd app create ${{ inputs.argocd_arguments }}
          if [ $? -eq 0 ]; then
            echo "Creating Argo CD app with name ${{ inputs.app_name }}"
            sleep 10

            # Fetch app information to make sure the app is registered
            app_info=$(argocd app get ${{ inputs.app_name }} --output json 2>/dev/null)
            if [ $? -eq 0 ] && [ -n "$app_info" ]; then
              echo "::group::app info"
              echo "App Info: $app_info"
              echo "::endgroup::"
              echo "Syncing Argo CD app..."

              argocd app sync ${{ inputs.app_name }} --async --force || true
              break
            else
              echo "Attempt $attempt: Failed to get app information. Retrying..."
              continue
            fi
          else
            echo "Argo CD app creation failed on attempt $attempt."
            if [ "$attempt" -eq "$max_retries" ]; then
                echo "Max retries reached. Exiting workflow."
                exit 1
            else
                echo "Attempt $attempt: Retrying in 10 seconds..."
                sleep 10
            fi
          fi
      done
    env:
      ARGOCD_AUTH_TOKEN: ${{ inputs.argocd_token }}
      ARGOCD_OPTS: "--grpc-web"
      ARGOCD_SERVER: ${{ inputs.argocd_server }}
  - name: Wait for sync
    id: wait_for_sync
    shell: bash
    run: |-
      echo "::group::wait for sync"

      TIMEOUT=${{ inputs.argocd_wait_for_sync_timeout }}
      INTERVAL=30   # Interval between retries in seconds
      ELAPSED=0
      while [ $ELAPSED -lt $TIMEOUT ]; do
        ARGOCD_APP_STATUS=$(argocd app get "${{ inputs.app_name }}" -o json | jq -r '.status.health.status')
        echo "Current status: $ARGOCD_APP_STATUS"

        if [ "$ARGOCD_APP_STATUS" == "Healthy" ]; then
          echo "App is healthy."
          break
        fi

        echo "App is not healthy yet. Retrying in $INTERVAL seconds..."
        sleep $INTERVAL
        ELAPSED=$((ELAPSED + INTERVAL))
        echo "Elapsed time is $ELAPSED seconds."
      done

      echo "::endgroup::"

      if [ "$ARGOCD_APP_STATUS" == "Healthy" ]; then
        echo "Application reached healthy state."
        exit 0
      else
        echo "Timeout reached. The application did not become healthy. Collecting troubleshooting information."
        ARGOCD_APP_DETAILS=$(cat <<EOF
      ArgoCD App details
      ------------------
      App health: $(argocd app get ${{ inputs.app_name }} -o json | jq -r '.status.health.status')
      App sync: $(argocd app get ${{ inputs.app_name }} -o json | jq -r '.status.sync.status')
      App conditions: $(argocd app get ${{ inputs.app_name }} -o json | jq -r '.status.conditions')
      State of the latest operation phase: $(argocd app get ${{ inputs.app_name }} -o json | jq -r '.status.operationState.phase')
      Message from the latest operation phase: $(argocd app get ${{ inputs.app_name }} -o json | jq -r '.status.operationState.message')
      Sync results:
      $(argocd app get ${{ inputs.app_name }} -o json | jq '.status.operationState.syncResult[]')
      EOF
        )
        echo "argocd_app_details<<EOF" >> $GITHUB_OUTPUT
        echo "$ARGOCD_APP_DETAILS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        # ensure output is flushed before exiting
        # sync
        exit 1
      fi

    env:
      ARGOCD_AUTH_TOKEN: ${{ inputs.argocd_token }}
      ARGOCD_OPTS: "--grpc-web"
      ARGOCD_SERVER: ${{ inputs.argocd_server  }}

    #########################################################################
    # Get additional troubleshooting information from Kubernetes events
    # in case of the app didn't reach healthy state.
    # Events only get requested if a GitHub token with appropriate rights
    # is passed from the caller workflow.
  - name: Setup Teleport
    if: failure() && inputs.github_token != ''
    id: setup_teleport
    uses: teleport-actions/setup@v1
    with:
      version: 17.2.3
  - name: Authenticate with Teleport
    if: failure() && steps.setup_teleport.outcome == 'success'
    id: auth_teleport
    env:
      GITHUB_TOKEN: ${{ inputs.github_token }}
    uses: teleport-actions/auth-k8s@v2
    with:
      proxy: camunda.teleport.sh:443
      token: infra-ci-prod-github-action-preview-env-infra
      kubernetes-cluster: camunda-ci
  - name: Get Kubernetes events
    if: failure() && steps.auth_teleport.outcome == 'success'
    id: get_k8s_events
    shell: bash
    run: |
      kubectl auth whoami
      kubectl get ns ${{ inputs.app_name }}
      KUBERNETES_EVENTS=$(cat <<EOF
      Kubernetes events
      -----------------
      $(kubectl get event -n ${{inputs.app_name }} -o json | \
        jq -r '.items[] | select(.type == "Warning") | {time: .lastTimestamp, message: .message} | @json' | \
        jq -s 'sort_by(.time) | reverse | .[] | "\(.time) \(.message)"')
      EOF
      )
      echo "kubernetes_events<<EOF" >> $GITHUB_OUTPUT
      echo "$KUBERNETES_EVENTS" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

    #########################################################################
    # Update the deployment status so we can see the result in the Pull Request
    # or in the list of environments.
  - name: Update branch deployment status
    # `always()` ensures that the deployment status
    # is updated regardless of previous steps failing.
    if: always()
    uses: bobheadxi/deployments@v1.5.0
    with:
      step: finish
      token: ${{ github.token }}
      # If composite action has been cancelled (by a user action, tiemout etc.), we consider it a failure
      # In that case, status must be set/changed explicitly to "failure", otherwise bobheadxi/deployments will define the deployment as inactive.
      status: ${{ github.action_status != 'cancelled' && github.action_status || 'failure'}}
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      env_url: ${{ inputs.app_url }}
      ref: ${{ inputs.revision }}
      env: ${{ inputs.app_name }}
  - name: Create deployment status artifact
    if: always()
    shell: bash
    env:
      APP_NAME: ${{ inputs.app_name }}
      APP_URL: ${{ inputs.app_url }}
      ARGOCD_SERVER: ${{ inputs.argocd_server }}
      REPO: ${{ github.repository }}
      RUN_ID: ${{ github.run_id }}
      ARGOCD_APP_DETAILS: ${{ steps.wait_for_sync.outputs.argocd_app_details }}
      KUBERNETES_EVENTS: ${{ steps.get_k8s_events.outputs.kubernetes_events }}
    run: |
      template=$(envsubst < ${{ github.action_path }}/templates/comment-${{ github.action_status }}.md)
      echo "$template" > status_${{ inputs.app_name }}.md
      echo "$template" >> $GITHUB_STEP_SUMMARY
  - name: Upload deployment status as artifact
    if: always()
    uses: actions/upload-artifact@v4
    with:
      name: deployment-status-${{ github.run_id }}-${{ github.run_attempt }}-${{ inputs.app_name }}
      path: status_${{ inputs.app_name }}.md
      retention-days: 1
